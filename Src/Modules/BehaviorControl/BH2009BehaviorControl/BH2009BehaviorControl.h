/**
* @file BH2009BehaviorControl.h
* 
* Implementation of class BehaviorControl.
*
* @author Martin L�tzsch
* @author Matthias J�ngel
* @author Max Risler
*/

#ifndef __BH2009BehaviorControl_h_
#define __BH2009BehaviorControl_h_

#include "BH2009BehaviorControlBase.h"
#include "Tools/Xabsl/GT/GTXabslEngineExecutor.h"
#include "../Symbols.h"
#include "Tools/Team.h"
#include "Tools/RingBufferWithSum.h"

struct CognitionSharedMem;

/**
* @class BH2009BehaviorControl
*
* A Behavior based on the xabsl::Engine that is used by GermanTeam
* for the RoboCup 2009.
*
* @author Martin L�tzsch
* @author Matthias J�ngel
* @author Max Risler
* @author Judith M�ller
*/ 
class BH2009BehaviorControl : public BH2009BehaviorControlBase, public GTXabslEngineExecutor
{
public:
  /** 
  * Constructor.
  */
  BH2009BehaviorControl();

  /** destructor */
  ~BH2009BehaviorControl();

  PROCESS_WIDE_STORAGE_STATIC BH2009BehaviorControl* theInstance; /**< Points to the only instance of this class in this process or is 0 if there is none. */

  /** 
  * Is called for every incoming debug message.
  * @param message An interface to read the message from the queue
  * @return if the message was read
  */
  static bool handleMessage(InMessage& message);

private:

  CognitionSharedMem* 	cognition_data;
  int 					cognition_mem_fd;
  void initCognitionSharedMemory();
  void readWriteCognitionSharedMemory();
  void writeBHumanSharedMemory();
  void readCognitionSharedMemory();

  /** Registers symbols and basic behaviors at the engine */
  virtual void registerSymbolsAndBasicBehaviors();
  
  /** Is called if the engine could not be created */
  virtual void executeIfEngineCouldNotBeCreated();

  /** 
  * Prints the main action that was generated by the execution of the engine to a string
  * @param buf the string where to print the action
  */
  virtual void printGeneratedMainActionToString(char* buf) const;

  /** a list of symbol definition classes */
  std::list<Symbols*> symbols;

  /** name of currently selected agent */
  std::string currentAgent;

  /** the output generated by the behavior control */
  BehaviorControlOutput behaviorControlOutput;

  /** updates the behavior control output */
  void update(BehaviorControlOutput& behaviorControlOutput);
  
  /** updates the motion request by copying from behavior control output */
  void update(MotionRequest& motionRequest);

  /** updates the head motion request by copying from behavior control output */
  void update(HeadMotionRequest& headMotionRequest) {headMotionRequest = theBehaviorControlOutput.headMotionRequest;}
  
  /** updates the LED request by copying from behavior control output */
  void update(LEDRequest& ledRequest);
  
  /** updates the sound request by copying from behavior control output */
  void update(SoundRequest& soundRequest) {soundRequest = theBehaviorControlOutput.soundRequest;}

  void init();
};

#endif// __BH2009BehaviorControl_h_
