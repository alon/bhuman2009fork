/**
* @file UniversalResourceCompiler.cpp
*
* Is used to compile the motion net for the special actions
* and for generating a variety of other files.
*
* @author Uwe Düffert
* @author Martin Lötzsch
*/

#include <fstream>
#include <iostream>
#include <string>
#include "MofCompiler.h"
#include "Platform/File.h"
#include "Representations/MotionControl/MotionRequest.h"
#include "Representations/Infrastructure/SoundRequest.h"
#include "Tools/Xabsl/GT/GTXabslTools.h"

void generateMotionXabsl()
{
  int i;
  char s[256];
  sprintf(s,"%s/Src/Modules/BehaviorControl/CommonSymbols/motion_symbols.xabsl",File::getGTDir());
  printf("generating %s\n",s);
  std::ofstream motionSymbolsXabsl;
  motionSymbolsXabsl.open(s,std::ios::out);
  motionSymbolsXabsl << "////////////////////////////////////////////////\n";
  motionSymbolsXabsl << "// This file is generated by URC. Do not modify.\n";
  motionSymbolsXabsl << "////////////////////////////////////////////////\n\n";
  
  motionSymbolsXabsl << "/** Symbols for the setting the motion request. */\n";
  motionSymbolsXabsl << "namespace motion_symbols(\"Motion Symbols\") {\n\n";

  motionSymbolsXabsl << "  /** The motion type ids */\n";
  motionSymbolsXabsl << "  enum motion.type {\n";
  for (i=0;i<MotionRequest::numOfMotions;i++)
  {
    getXabslString(s,MotionRequest::getMotionName((MotionRequest::Motion)i));
    if(i != 0)
      motionSymbolsXabsl << ",\n";
    motionSymbolsXabsl << "    " << s;
  }
  motionSymbolsXabsl << "\n  };\n\n";

  motionSymbolsXabsl << "  /** The currently requested motion type. */\n";
  motionSymbolsXabsl << "  enum motion.type output motion.type;\n";
  motionSymbolsXabsl << "  /** The currently executed motion type. */\n";
  motionSymbolsXabsl << "  enum motion.type input executed_motion.type;\n\n";

  motionSymbolsXabsl << "  /** The currently requested walk speed in x direction. */\n";
  motionSymbolsXabsl << "  float output motion.walk_speed.x [-" << walkMaxBackwardSpeed << ".." << walkMaxForwardSpeed << "] \"mm/s\";\n";
  motionSymbolsXabsl << "  /** The currently requested percentual walk speed in x direction. */\n";
  motionSymbolsXabsl << "  float output motion.walk_speed.percentual.x [-100..100] \"percent\";\n";
  motionSymbolsXabsl << "  /** The currently executed walk speed in x direction. */\n";
  motionSymbolsXabsl << "  float input executed_motion.walk_speed.x [-" << walkMaxBackwardSpeed << ".." << walkMaxForwardSpeed << "] \"mm/s\";\n\n";

  motionSymbolsXabsl << "  /** The currently requested walk speed in y direction. */\n";
  motionSymbolsXabsl << "  float output motion.walk_speed.y [-" << walkMaxLeftRightSpeed << ".." << walkMaxLeftRightSpeed << "] \"mm/s\";\n";
  motionSymbolsXabsl << "  /** The currently requested percentual walk speed in y direction. */\n";
  motionSymbolsXabsl << "  float output motion.walk_speed.percentual.y [-100..100] \"percent\";\n";
  motionSymbolsXabsl << "  /** The currently executed walk speed in y direction. */\n";
  motionSymbolsXabsl << "  float input executed_motion.walk_speed.y [-" << walkMaxLeftRightSpeed << ".." << walkMaxLeftRightSpeed << "] \"mm/s\";\n\n";

  motionSymbolsXabsl << "  /** The currently requested rotational walk speed. */\n";
  motionSymbolsXabsl << "  float output motion.walk_speed.rot [-" << toDegrees(walkMaxRotationSpeed) << ".." << toDegrees(walkMaxRotationSpeed) << "] \"deg/s\";\n";
  motionSymbolsXabsl << "  /** The currently requested percentual rotational walk speed. */\n";
  motionSymbolsXabsl << "  float output motion.walk_speed.percentual.rot [-100..100] \"percent\";\n";
  motionSymbolsXabsl << "  /** The currently executed rotational walk speed. */\n";
  motionSymbolsXabsl << "  float input executed_motion.walk_speed.rot [-" << toDegrees(walkMaxRotationSpeed) << ".." << toDegrees(walkMaxRotationSpeed) << "] \"deg/s\";\n\n";

  motionSymbolsXabsl << "  /** The x-coordinate of a currently requested relative walk target. */\n";
  motionSymbolsXabsl << "  float output motion.walk_target.x;\n";
  motionSymbolsXabsl << "  /** The y-coordinate of a currently requested relative walk target. */\n";
  motionSymbolsXabsl << "  float output motion.walk_target.y;\n";
  motionSymbolsXabsl << "  /** The rotation of a currently requested relative walk target. */\n";
  motionSymbolsXabsl << "  float output motion.walk_target.rot;\n";
  motionSymbolsXabsl << "  /** Whether a requested relative walk target was reached. */\n";
  motionSymbolsXabsl << "  bool input motion.walk_target.reached;\n\n";

  motionSymbolsXabsl << "  /** Allows to disable step size stabilization. */\n";
  motionSymbolsXabsl << "  bool output motion.walk_pedantic;\n\n";

  motionSymbolsXabsl << "  /** The special action ids */\n";
  motionSymbolsXabsl << "  enum motion.special_action {\n";
  for (i=0;i<SpecialActionRequest::numOfSpecialActions;i++)
  {
    getXabslString(s,SpecialActionRequest::getSpecialActionName((SpecialActionRequest::SpecialActionID)i));
    if(i != 0)
      motionSymbolsXabsl << ",\n";
    motionSymbolsXabsl << "    " << s;
  }
  motionSymbolsXabsl << "\n  };\n\n";

  motionSymbolsXabsl << "  /** The currently requested special action. */\n";
  motionSymbolsXabsl << "  enum motion.special_action output motion.special_action;\n";
  motionSymbolsXabsl << "  /** The last requested special action. */\n";
  motionSymbolsXabsl << "  enum motion.special_action output motion.last_special_action;\n";
  motionSymbolsXabsl << "  /** The currently executed special action. */\n";
  motionSymbolsXabsl << "  enum motion.special_action input executed_motion.special_action;\n\n";
  
  motionSymbolsXabsl << "  /** Whether the currently requested special action should be mirrored. */\n";
  motionSymbolsXabsl << "  bool output motion.special_action.mirror;\n";
  motionSymbolsXabsl << "  /** Whether the currently executed special action is mirrored. */\n";
  motionSymbolsXabsl << "  bool input executed_motion.special_action.mirror;\n";

  motionSymbolsXabsl << "}\n";
  
  motionSymbolsXabsl.close();
}

void generateSoundXabsl()
{
  int i;
  char s[256];
  sprintf(s,"%s/Src/Modules/BehaviorControl/CommonSymbols/sound_symbols.xabsl",File::getGTDir());
  printf("generating %s\n",s);
  std::ofstream soundSymbolsXabsl;
  soundSymbolsXabsl.open(s,std::ios::out);

  soundSymbolsXabsl << "////////////////////////////////////////////////\n";
  soundSymbolsXabsl << "// This file is generated by URC. Do not modify.\n";
  soundSymbolsXabsl << "////////////////////////////////////////////////\n\n";

  soundSymbolsXabsl << "/** Symbols for setting the sound request. */\n";
  soundSymbolsXabsl << "namespace sound_symbols(\"Sound Symbols\") {\n\n";
  
  soundSymbolsXabsl << "  /** The ids of sounds */\n";
  soundSymbolsXabsl << "  enum sound {\n";

  for (i=0;i<SoundRequest::numOfSounds;i++)
  {
    getXabslString(s,SoundRequest::getSoundName((SoundRequest::Sound)i));
    if(i != 0)
      soundSymbolsXabsl << ",\n";
    soundSymbolsXabsl << "    " << s;
  }
  soundSymbolsXabsl << "\n  };\n";
  soundSymbolsXabsl << "  enum sound output sound;\n";

  soundSymbolsXabsl << "}\n";
  
  soundSymbolsXabsl.close();
}

void usage()
{
  printf("\nusage:\n URC [/motion | /sound]\n\n");
}

int main(int argc, char* argv[])
{
  if (argc==2)
  {
    if (strcmp(argv[1],"/motion")==0)
    {
      generateMotionXabsl();
    }
    else if (strcmp(argv[1],"/sound")==0)
    {
      generateSoundXabsl();
    }
    else
    {
      usage();
    }
  }
  else if (argc>2)
  {
    usage();
  }
  else
  {
    char buffer[1000];
    if(compileMofs(buffer, sizeof(buffer)))
      printf("Created 'Config/specialActions.dat' successfully\n");
    else
      printf("%s", buffer);
  }
}
