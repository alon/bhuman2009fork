commit e60fbd871d1423e4f192edea44964ffa47324f7f
Author: ari yakir <ariy@ariy-laptop.(none)>
Date:   Wed Feb 17 02:58:52 2010 +0200

    still debugging after all this time. removed Motion process, allow running on pc by ignoring some errors from ioctrls that work only on nao

diff --git a/Src/Platform/linux/GTAssert.h b/Src/Platform/linux/GTAssert.h
index 4a40b16..6138eac 100644
--- a/Src/Platform/linux/GTAssert.h
+++ b/Src/Platform/linux/GTAssert.h
@@ -3,7 +3,7 @@
  *
  * This file contains macros for low level debugging.
  *
- * @author Thomas Röfer
+ * @author Thomas Rï¿½fer
  */
 #ifndef __GTAssert_h_
 #define __GTAssert_h_
@@ -44,6 +44,13 @@
 #define VERIFY(c) assert(c)
 
 /**
+ * Warn macros - print warning but carry on
+ */
+#define WARN(c, msg) { if (c) { printf("%s\n", msg); } }
+
+#define WARN0(c) { if (c) { printf(#c " failed\n"); } }
+
+/**
  * PRINT prints a text directly to the output if and NDEBUG is not defined.
  * PRINT does not evaluate the parameter if NDEBUG is defined.
  * @param text The text that will be printed.
diff --git a/Src/Platform/linux/Main.cpp b/Src/Platform/linux/Main.cpp
index b5a3e6b..9dc2efc 100644
--- a/Src/Platform/linux/Main.cpp
+++ b/Src/Platform/linux/Main.cpp
@@ -104,8 +104,7 @@ int main(int argc, char *argv[])
     // change working directory
     if(*gtDir && chdir(gtDir) != 0)
     {
-      fprintf(stderr, "chdir to config directory failed!\n");
-      exit(EXIT_FAILURE);
+      fprintf(stderr, "chdir to config directory failed! assuming we aren't on a robot\n");
     }
 
     // the watchdog
diff --git a/Src/Platform/linux/NaoCamera.cpp b/Src/Platform/linux/NaoCamera.cpp
index f82122f..0aefd1d 100644
--- a/Src/Platform/linux/NaoCamera.cpp
+++ b/Src/Platform/linux/NaoCamera.cpp
@@ -2,7 +2,7 @@
 * \file Platform/linux/NaoCamera.cpp
 * Interface to the Nao camera using linux-uvc.
 * \author Colin Graf
-* \author Thomas Röfer
+* \author Thomas Rï¿½fer
 */
 
 #if defined(TARGET_SIM) && !defined(NO_NAO_EXTENSIONS)
@@ -89,12 +89,15 @@ storedTimeStamp(SystemCall::getCurrentSystemTime())
 
 #ifndef NO_NAO_EXTENSIONS
   int i2cFd = open("/dev/i2c-0", O_RDWR);
-  ASSERT(i2cFd != -1);
-  VERIFY(ioctl(i2cFd, 0x703, 8) == 0);
-  VERIFY(i2c_smbus_read_byte_data(i2cFd, 170) >= 2); // at least Nao V3
-  unsigned char cmd[2] = {2, 0};
-  VERIFY(i2c_smbus_write_block_data(i2cFd, 220, 1, cmd) != -1); // select lower camera
-  close(i2cFd);
+  if (i2cFd != -1) {
+	  VERIFY(ioctl(i2cFd, 0x703, 8) == 0);
+	  VERIFY(i2c_smbus_read_byte_data(i2cFd, 170) >= 2); // at least Nao V3
+	  unsigned char cmd[2] = {2, 0};
+	  VERIFY(i2c_smbus_write_block_data(i2cFd, 220, 1, cmd) != -1); // select lower camera
+	  close(i2cFd);
+  } else {
+	  std::cout << "could not open /dev/i2c-0 - we are not on a nao?\n";
+  }
 #endif
 
   // open device
@@ -107,10 +110,10 @@ storedTimeStamp(SystemCall::getCurrentSystemTime())
   memset(&control, 0, sizeof(control));
   control.id = V4L2_CID_CAM_INIT;
   control.value = 0;
-  VERIFY(ioctl(fd, VIDIOC_S_CTRL, &control) >= 0);
+  WARN(ioctl(fd, VIDIOC_S_CTRL, &control) >= 0, "VIDIOC_S_CTRL failed");
 
   v4l2_std_id esid0 = WIDTH == 320 ? 0x04000000UL : 0x08000000UL;
-  VERIFY(!ioctl(fd, VIDIOC_S_STD, &esid0));
+  WARN(!ioctl(fd, VIDIOC_S_STD, &esid0), "VIDIOC_S_STD failed");
 #endif
   
   // set format
@@ -172,11 +175,11 @@ storedTimeStamp(SystemCall::getCurrentSystemTime())
   settings.gain = getControlSetting(V4L2_CID_GAIN);
   // make sure automatic stuff is off
 #ifndef NO_NAO_EXTENSIONS
-  VERIFY(setControlSetting(V4L2_CID_AUTOEXPOSURE , 0));
-  VERIFY(setControlSetting(V4L2_CID_AUTO_WHITE_BALANCE, 0));
-  VERIFY(setControlSetting(V4L2_CID_AUTOGAIN, 0));
-  VERIFY(setControlSetting(V4L2_CID_HFLIP, 0));
-  VERIFY(setControlSetting(V4L2_CID_VFLIP, 0));
+  WARN0(setControlSetting(V4L2_CID_AUTOEXPOSURE , 0));
+  WARN0(setControlSetting(V4L2_CID_AUTO_WHITE_BALANCE, 0));
+  WARN0(setControlSetting(V4L2_CID_AUTOGAIN, 0));
+  WARN0(setControlSetting(V4L2_CID_HFLIP, 0));
+  WARN0(setControlSetting(V4L2_CID_VFLIP, 0));
 #else
   setControlSetting(V4L2_CID_AUTO_WHITE_BALANCE, 0);
   setControlSetting(V4L2_CID_AUTOGAIN, 0);
diff --git a/Src/Platform/linux/Thread.h b/Src/Platform/linux/Thread.h
index a24dacd..635f20e 100644
--- a/Src/Platform/linux/Thread.h
+++ b/Src/Platform/linux/Thread.h
@@ -13,6 +13,7 @@
 
 #include <pthread.h>
 #include <unistd.h>
+#include <iostream> // TODO: remove me
 #include "Platform/GTAssert.h"
 
 /**
@@ -110,7 +111,11 @@ public:
         param.sched_priority = sched_get_priority_max(SCHED_FIFO);
       else
         param.sched_priority = priority;
-      VERIFY(!pthread_setschedparam(handle, SCHED_FIFO, &param));
+      // TODO: use the following line again instead of the warning
+      //VERIFY(!pthread_setschedparam(handle, SCHED_FIFO, &param));
+      if (!pthread_setschedparam(handle, SCHED_FIFO, &param)) {
+    	  std::cout << "could not set thread priority to " << prio << "\n";
+      }
     }
   }
 
