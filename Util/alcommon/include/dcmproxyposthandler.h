/**
 * This file was generated by ALProxyGenerator
 */

#ifndef DCMPROXYPOSTHANDLER_H_
# define DCMPROXYPOSTHANDLER_H_
# include "alproxy.h"
namespace AL
{
  class DCMProxy;

  /**
   * DCMProxyPostHandler gives acces to all bound methods of the module, using a thread around each call.
   * Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
   */
  class DCMProxyPostHandler
    {
       friend class DCMProxy;

       protected:
          AL::ALProxy* fParent;

       private:
          void setParent(AL::ALProxy* pParent) { fParent = pParent;}

       public:

       DCMProxyPostHandler() : fParent(NULL)
       {}

       /**
        * \brief calibration : Calibration of a joint
        * \param pKeyName string : Joint name
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int calibration ( ALValue pKeyName )
       {
         return fParent->pCall( "calibration", pKeyName );
       }

       /**
        * \brief createAlias : Create or change an alias (list of actuators)
        * \param pParams Alias name and description
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int createAlias ( ALValue pParams )
       {
         return fParent->pCall( "createAlias", pParams );
       }

       /**
        * \brief dataChanged : Called by ALMemory when subscribed data has been modified.
        * \param dataName Name of the modified data
        * \param value value of the data
        * \param message associate message.
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int dataChanged ( std::string dataName, ALValue value, std::string message )
       {
         return fParent->pCall( "dataChanged", dataName, value, message );
       }

       /**
        * \brief exit : Exit and unregister module, with no params and no return value.
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int exit (  )
       {
         return fParent->pCall( "exit" );
       }

       /**
        * \brief getBrokerName : return the broker name
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int getBrokerName (  )
       {
         return fParent->pCall( "getBrokerName" );
       }

       /**
        * \brief getMethodHelp : Retrieve a method's description
        * \param methodName the name of the method
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int getMethodHelp ( std::string methodName )
       {
         return fParent->pCall( "getMethodHelp", methodName );
       }

       /**
        * \brief getMethodList : Retrieve the module's method list.
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int getMethodList (  )
       {
         return fParent->pCall( "getMethodList" );
       }

       /**
        * \brief getPrefix : Return the STM base name
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int getPrefix (  )
       {
         return fParent->pCall( "getPrefix" );
       }

       /**
        * \brief getTime : Return the DCM time
        * \param pTime optional time in ms (signed) to add/remove
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int getTime ( int pTime )
       {
         return fParent->pCall( "getTime", pTime );
       }

       /**
        * \brief innerTest : Run an internal test to this module.
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int innerTest (  )
       {
         return fParent->pCall( "innerTest" );
       }

       /**
        * \brief isRunning : return true if method is currently running
        * \param ID ID of the method to wait
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int isRunning ( int ID )
       {
         return fParent->pCall( "isRunning", ID );
       }

       /**
        * \brief moduleHelp : Retrieve the module's description
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int moduleHelp (  )
       {
         return fParent->pCall( "moduleHelp" );
       }

       /**
        * \brief ping : Just a ping, with no params and returning always true
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int ping (  )
       {
         return fParent->pCall( "ping" );
       }

       /**
        * \brief preferences : Save updated value from DCM in XML pref file
        * \param pAction string : 'Save' 'Load' 'Add'
        * \param pWhere string : 'Chest' 'Head' 'Main' 'All' 
        * \param pKeyName The name of the key if action = 'Add'.
        * \param pKeyValue The ALVAlue of the key to add
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int preferences ( std::string pAction, std::string pWhere, std::string pKeyName, ALValue pKeyValue )
       {
         return fParent->pCall( "preferences", pAction, pWhere, pKeyName, pKeyValue );
       }

       /**
        * \brief set : Call this function to send a timed-command list to an actuator
        * \param pCommands ALValue with all data
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int set ( ALValue pCommands )
       {
         return fParent->pCall( "set", pCommands );
       }

       /**
        * \brief setAlias : Call this function to send timed-command list to an alias (list of actuators)
        * \param pCommands ALValue with all data
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int setAlias ( ALValue pCommands )
       {
         return fParent->pCall( "setAlias", pCommands );
       }

       /**
        * \brief special : Special DCM commands
        * \param pName one string and could be Reset, Version, Chain, Diagnostic, Config
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int special ( std::string pName )
       {
         return fParent->pCall( "special", pName );
       }

       /**
        * \brief version : Returns the revision of the module.
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int version (  )
       {
         return fParent->pCall( "version" );
       }

       /**
        * \brief wait : wait end of execution method if method was called with pCall
        * \param ID ID of the method to wait
        * \param timeout timeout of the wait in ms. 0 if no timeout
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int wait ( int ID, int timeout )
       {
         return fParent->pCall( "wait", ID, timeout );
       }

       /**
        * \brief waitMethod : wait end of execution method if method was called with pCall
        * \param name name of the method to wait
        * \param timeout timeout of the wait. 0 if no timeout
        * \return brokerTaskID : The ID of the task assigned to it by the broker.
        */
       int waitMethod ( std::string name, int timeout )
       {
         return fParent->pCall( "waitMethod", name, timeout );
       }

    };
};

#endif
