/**
 * This file was generated by ALProxyGenerator
 */

#ifndef ALVISIONTOOLBOXPROXY_H_
# define ALVISIONTOOLBOXPROXY_H_
# include "alproxy.h"
# include "alvisiontoolboxproxyposthandler.h"

namespace AL
{
  /**
   * ALVisionToolboxProxy gives acces to all bound methods of the module.
   */
  class ALVisionToolboxProxy : public ALProxy
    {
       public:

       /**
        * Local Constructor
        */
       ALVisionToolboxProxy(ALPtr<ALBroker> pBroker) : ALProxy(pBroker, "ALVisionToolbox")
       { post.setParent( (ALProxy*)this );}

       /**
        * Remote Constructor
        */
       ALVisionToolboxProxy(std::string pIP, int pPort) : ALProxy("ALVisionToolbox", pIP, pPort)
       { post.setParent( (ALProxy*)this );}

       /**
        * \brief: Implements thread wrappers around methods
       */
       ALVisionToolboxProxyPostHandler post;

       /**
        * \brief dataChanged : Called by ALMemory when subscribed data has been modified.
        * \param dataName Name of the modified data
        * \param value value of the data
        * \param message associate message.
        */
       void dataChanged ( std::string dataName, ALValue value, std::string message )
       {
         callVoid( "dataChanged", dataName, value, message );
       }

       /**
        * \brief exit : Exit and unregister module, with no params and no return value.
        */
       void exit (  )
       {
         callVoid( "exit" );
       }

       /**
        * \brief getBrokerName : return the broker name
        * \return broker name : string that contain broker name
        */
       std::string getBrokerName (  )
       {
         return call<std::string>( "getBrokerName" );
       }

       /**
        * \brief getMethodHelp : Retrieve a method's description
        * \param methodName the name of the method
        * \return getMethodHelp : a structure containing the method description
        */
       ALValue getMethodHelp ( std::string methodName )
       {
         return call<ALValue>( "getMethodHelp", methodName );
       }

       /**
        * \brief getMethodList : Retrieve the module's method list.
        * \return methodList : an array containing methods name.
        */
       std::vector<std::string>  getMethodList (  )
       {
         return call<std::vector<std::string> >( "getMethodList" );
       }

       /**
        * \brief halfPress : Prepare camera for shooting (like the auto-focus on standard and digital cameras)
        */
       void halfPress (  )
       {
         callVoid( "halfPress" );
       }

       /**
        * \brief innerTest : Run an internal test to this module.
        * \return Test_return : true if internal tests are ok
        */
       bool innerTest (  )
       {
         return call<bool>( "innerTest" );
       }

       /**
        * \brief isItDark : Tell if this is dark around.
        * \return isDark : [0;4] outdoor - [5;100] indoor bright - [101;127] shadowed place
        */
       int isItDark (  )
       {
         return call<int>( "isItDark" );
       }

       /**
        * \brief isRunning : return true if method is currently running
        * \param ID ID of the method to wait
        * \return isRunning : True method is currently running
        */
       bool isRunning ( int ID )
       {
         return call<bool>( "isRunning", ID );
       }

       /**
        * \brief logTPRInstanceInfo : Print in the logger the info for an instance of takePictureRegurarly()
        * \param pInstanceNumber number of the instance we want to  get info on
        */
       void logTPRInstanceInfo ( int pInstanceNumber )
       {
         callVoid( "logTPRInstanceInfo", pInstanceNumber );
       }

       /**
        * \brief moduleHelp : Retrieve the module's description
        * \return moduleHelp : a structure describing the module
        */
       ALValue moduleHelp (  )
       {
         return call<ALValue>( "moduleHelp" );
       }

       /**
        * \brief ping : Just a ping, with no params and returning always true
        * \return alwaysTrue : returns always true
        */
       bool ping (  )
       {
         return call<bool>( "ping" );
       }

       /**
        * \brief setWhiteBalance : Set white balance by using Nao's white hands as reference.
        * \param pCamera Camera we want to set white balance to : [0] top - [1] bottom - [2] both
        */
       void setWhiteBalance ( int pCamera )
       {
         callVoid( "setWhiteBalance", pCamera );
       }

       /**
        * \brief stopTPR : Stop an instance of takePictureRegularly()
        * \param pPathAndNameRoot path and name root of the file we want to stop recording
        * \param pImageRecordFormat formats of the file we want to stop recording
        */
       void stopTPR ( std::string pPathAndNameRoot, std::string pImageRecordFormat )
       {
         callVoid( "stopTPR", pPathAndNameRoot, pImageRecordFormat );
       }

       /**
        * \brief takePicture : Shoot 3 successives pictures and place them in the ftp folder (if halfPress is not done before, will take longer between clic and shoot)
        */
       void takePicture (  )
       {
         callVoid( "takePicture" );
       }

       /**
        * \brief takePictureRegularly : Shoot regularly a picture to follow Nao's evolution in his environment
        * \param pSecondsBetweenTwoShots how many seconds between two pictures?
        * \param pPathAndNameRoot path and the root of the name for the picture
        * \param pOverwriteImage do we need to overwrite the picture, or do we add a timestamp to the name?
        * \param pImageRecordFormat such as jpeg, bmp, png, etc.
        * \param pResolution resolution for the image (e.g. kQQVGA, kQVGA)
        */
       void takePictureRegularly ( float pSecondsBetweenTwoShots, std::string pPathAndNameRoot, bool pOverwriteImage, std::string pImageRecordFormat, int pResolution )
       {
         callVoid( "takePictureRegularly", pSecondsBetweenTwoShots, pPathAndNameRoot, pOverwriteImage, pImageRecordFormat, pResolution );
       }

       /**
        * \brief version : Returns the revision of the module.
        * \return version_string : the string containing the version
        */
       std::string version (  )
       {
         return call<std::string>( "version" );
       }

       /**
        * \brief wait : wait end of execution method if method was called with pCall
        * \param ID ID of the method to wait
        * \param timeout timeout of the wait in ms. 0 if no timeout
        * \return timeout : True if wait exit with timeout
        */
       bool wait ( int ID, int timeout )
       {
         return call<bool>( "wait", ID, timeout );
       }

       /**
        * \brief waitMethod : wait end of execution method if method was called with pCall
        * \param name name of the method to wait
        * \param timeout timeout of the wait. 0 if no timeout
        * \return timeout : True if wait exit with timeout
        */
       int waitMethod ( std::string name, int timeout )
       {
         return call<int>( "waitMethod", name, timeout );
       }

    };
};

#endif
