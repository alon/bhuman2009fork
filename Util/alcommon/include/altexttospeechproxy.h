/**
 * This file was generated by ALProxyGenerator
 */

#ifndef ALTEXTTOSPEECHPROXY_H_
# define ALTEXTTOSPEECHPROXY_H_
# include "alproxy.h"
# include "altexttospeechproxyposthandler.h"

namespace AL
{
  /**
   * ALTextToSpeechProxy gives acces to all bound methods of the module.
   */
  class ALTextToSpeechProxy : public ALProxy
    {
       public:

       /**
        * Local Constructor
        */
       ALTextToSpeechProxy(ALPtr<ALBroker> pBroker) : ALProxy(pBroker, "ALTextToSpeech")
       { post.setParent( (ALProxy*)this );}

       /**
        * Remote Constructor
        */
       ALTextToSpeechProxy(std::string pIP, int pPort) : ALProxy("ALTextToSpeech", pIP, pPort)
       { post.setParent( (ALProxy*)this );}

       /**
        * \brief: Implements thread wrappers around methods
       */
       ALTextToSpeechProxyPostHandler post;

       /**
        * \brief dataChanged : Called by ALMemory when subscribed data has been modified.
        * \param dataName Name of the modified data
        * \param value value of the data
        * \param message associate message.
        */
       void dataChanged ( std::string dataName, ALValue value, std::string message )
       {
         callVoid( "dataChanged", dataName, value, message );
       }

       /**
        * \brief exit : Exit and unregister module, with no params and no return value.
        */
       void exit (  )
       {
         callVoid( "exit" );
       }

       /**
        * \brief getAvailableLanguages : Lists the languages installed on the system.
        * \return pLanguage : Array of string containing the languages installed on the system.
        */
       std::vector<std::string>  getAvailableLanguages (  )
       {
         return call<std::vector<std::string> >( "getAvailableLanguages" );
       }

       /**
        * \brief getAvailableVoices : Lists the available voices. The displayed list contains the voice IDs. This method does not take any parameter.
        * \return pVoiceList :  Array of string containing the voices installed on the system.
        */
       std::vector<std::string>  getAvailableVoices (  )
       {
         return call<std::vector<std::string> >( "getAvailableVoices" );
       }

       /**
        * \brief getBrokerName : return the broker name
        * \return broker name : string that contain broker name
        */
       std::string getBrokerName (  )
       {
         return call<std::string>( "getBrokerName" );
       }

       /**
        * \brief getLanguage : Gets the language of the current voice.
        * \return pLanguage : Language of the current voice.
        */
       std::string getLanguage (  )
       {
         return call<std::string>( "getLanguage" );
       }

       /**
        * \brief getMethodHelp : Retrieve a method's description
        * \param methodName the name of the method
        * \return getMethodHelp : a structure containing the method description
        */
       ALValue getMethodHelp ( std::string methodName )
       {
         return call<ALValue>( "getMethodHelp", methodName );
       }

       /**
        * \brief getMethodList : Retrieve the module's method list.
        * \return methodList : an array containing methods name.
        */
       std::vector<std::string>  getMethodList (  )
       {
         return call<std::vector<std::string> >( "getMethodList" );
       }

       /**
        * \brief getParam : Returns the value of one of the parameters of the voice. The available parameters are: "pitchShift", "doubleVoice","doubleVoiceLevel" and "doubleVoiceTimeShift"
        * \param pParameterName Name of the parameter.
        * \return pReturn : Value of the corresponding parameter
        */
       float getParam ( std::string pParameterName )
       {
         return call<float>( "getParam", pParameterName );
       }

       /**
        * \brief innerTest : Run an internal test to this module.
        * \return Test_return : true if internal tests are ok
        */
       bool innerTest (  )
       {
         return call<bool>( "innerTest" );
       }

       /**
        * \brief isRunning : return true if method is currently running
        * \param ID ID of the method to wait
        * \return isRunning : True method is currently running
        */
       bool isRunning ( int ID )
       {
         return call<bool>( "isRunning", ID );
       }

       /**
        * \brief loadVoicePreference : Loads a set of voice parameters defined in a xml file contained in the preferences folder.The name of the voice in the xml filename must be preceded by ALTextToSpeech_Voice_ 
        * \param pPreferenceName Name of the voice preference.
        */
       void loadVoicePreference ( std::string pPreferenceName )
       {
         callVoid( "loadVoicePreference", pPreferenceName );
       }

       /**
        * \brief moduleHelp : Retrieve the module's description
        * \return moduleHelp : a structure describing the module
        */
       ALValue moduleHelp (  )
       {
         return call<ALValue>( "moduleHelp" );
       }

       /**
        * \brief ping : Just a ping, with no params and returning always true
        * \return alwaysTrue : returns always true
        */
       bool ping (  )
       {
         return call<bool>( "ping" );
       }

       /**
        * \brief say : Performs the text-to-speech operation : it takes a string as input and outputs a sound in both speakers. It logs an error if the string is empty. String encoding must be UTF8.
        * \param pStringToSay text to say, encoded in UTF-8.
        */
       void say ( std::string pStringToSay )
       {
         callVoid( "say", pStringToSay );
       }

       /**
        * \brief sayToFile : Performs the text-to-speech operation: it takes a string as input and outputs a sound in a file.
        * \param pStringToSay Text to say, encoded in UTF-8.
        * \param pFileName RAW file where to store the sound. The sound is encoded with samplerate 22050, format S16_LE, 2 channels.
        */
       void sayToFile ( std::string pStringToSay, std::string pFileName )
       {
         callVoid( "sayToFile", pStringToSay, pFileName );
       }

       /**
        * \brief sayToFileAndPlay : This method performs the text-to-speech operation: it takes a string, outputs the synthesis result sound in a file, then it reads the file. The file is deleted afterwards. It is useful when you want to perform a short synthesis, when few CPU is available. Do not use it if you want a low-latency synthesis start or to synthesize a long string.
        * \param pStringToSay Text to say, encoded in UTF-8.
        */
       void sayToFileAndPlay ( std::string pStringToSay )
       {
         callVoid( "sayToFileAndPlay", pStringToSay );
       }

       /**
        * \brief setLanguage : Changes the Text-to-Speech language. It automatically changes the basic voice of the speech generation since each of them is related to a unique language. The basic voice that is taken is the first one of the language list obtained with the  getAvailableVoices method. If the language is not available, the current language remains unchanged. No exception is thrown in this case.
        * \param pLanguage Language name. Must belong to the languages available in TTS.  It should be an identifier string.
        */
       void setLanguage ( std::string pLanguage )
       {
         callVoid( "setLanguage", pLanguage );
       }

       /**
        * \brief setParam : Changes the parameters of the voice. The available parameters are: 
 	 pitchShift: applies a pitch shifting to the voice. The value indicates the ratio between the new fundamental frequencies and the old ones (examples: 2.0: octave above, 1.5: quint above) . correct range is (1.0 -- 4), or 0 to disable effect.
 	 doubleVoice: adds a second voice to the first one. The value indicates the ratio between the second voice fundamental frequency and the first one. correct range is (1.0 -- 4), or 0 to disable effect 
 	 doubleVoiceLevel: the corresponding value is the level of the double voice (1.0: equal to the main voice one) correct range is (0 -- 4). 
 	 doubleVoiceTimeShift: the corresponding value is the delay between the double voice and the main one. correct range is (0 -- 0.5) 
 If the effect value is not available, the effect parameter remains unchanged.
        * \param pEffectName Name of the parameter.
        * \param pEffectValue Value of the parameter.
        */
       void setParam ( std::string pEffectName, float pEffectValue )
       {
         callVoid( "setParam", pEffectName, pEffectValue );
       }

       /**
        * \brief setSystemVolume : Sets the system volume
        * \param volume volume [0-100].
        */
       void setSystemVolume ( int volume )
       {
         callVoid( "setSystemVolume", volume );
       }

       /**
        * \brief setVoice : Changes the basic voice of the speech generation. The voice identifier must belong to the installed voices, that can be listed using the getAvailableVoices method. If the voice is not available, it remains unchanded. No exception is thrown in this case.
        * \param pVoiceID The voice ID.
        */
       void setVoice ( std::string pVoiceID )
       {
         callVoid( "setVoice", pVoiceID );
       }

       /**
        * \brief stop : Stops the synthesis engine.
        * \param stoppedID ID of the process to stop.
        */
       void stop ( int stoppedID )
       {
         callVoid( "stop", stoppedID );
       }

       /**
        * \brief version : Returns the revision of the module.
        * \return version_string : the string containing the version
        */
       std::string version (  )
       {
         return call<std::string>( "version" );
       }

       /**
        * \brief wait : wait end of execution method if method was called with pCall
        * \param ID ID of the method to wait
        * \param timeout timeout of the wait in ms. 0 if no timeout
        * \return timeout : True if wait exit with timeout
        */
       bool wait ( int ID, int timeout )
       {
         return call<bool>( "wait", ID, timeout );
       }

       /**
        * \brief waitMethod : wait end of execution method if method was called with pCall
        * \param name name of the method to wait
        * \param timeout timeout of the wait. 0 if no timeout
        * \return timeout : True if wait exit with timeout
        */
       int waitMethod ( std::string name, int timeout )
       {
         return call<int>( "waitMethod", name, timeout );
       }

    };
};

#endif
