/**
 * This file was generated by ALProxyGenerator
 */

#ifndef ALLEDSPROXY_H_
# define ALLEDSPROXY_H_
# include "alproxy.h"
# include "alledsproxyposthandler.h"

namespace AL
{
  /**
   * ALLedsProxy gives acces to all bound methods of the module.
   */
  class ALLedsProxy : public ALProxy
    {
       public:

       /**
        * Local Constructor
        */
       ALLedsProxy(ALPtr<ALBroker> pBroker) : ALProxy(pBroker, "ALLeds")
       { post.setParent( (ALProxy*)this );}

       /**
        * Remote Constructor
        */
       ALLedsProxy(std::string pIP, int pPort) : ALProxy("ALLeds", pIP, pPort)
       { post.setParent( (ALProxy*)this );}

       /**
        * \brief: Implements thread wrappers around methods
       */
       ALLedsProxyPostHandler post;

       /**
        * \brief createGroup : Makes a group name for ease of setting multiple LEDs.
        * \param pGroupName The name of the group.
        * \param pLedNames A vector of the names of the LEDs in the group.
        */
       void createGroup ( std::string pGroupName, std::vector<std::string>  pLedNames )
       {
         callVoid( "createGroup", pGroupName, pLedNames );
       }

       /**
        * \brief dataChanged : Called by ALMemory when subscribed data has been modified.
        * \param dataName Name of the modified data
        * \param value value of the data
        * \param message associate message.
        */
       void dataChanged ( std::string dataName, ALValue value, std::string message )
       {
         callVoid( "dataChanged", dataName, value, message );
       }

       /**
        * \brief earLedsSetAngle : An animation to show a direction with the ears.
        * \param pDegrees The angle you want to show in degrees (int). 0 is up, 90 is forwards, 180 is down and 270 is back.
        * \param pDuration The duration in seconds of the animation.
        * \param pLeaveOnAtEnd If true the last led is left on at the end of the animation.
        */
       void earLedsSetAngle ( int pDegrees, float pDuration, bool pLeaveOnAtEnd )
       {
         callVoid( "earLedsSetAngle", pDegrees, pDuration, pLeaveOnAtEnd );
       }

       /**
        * \brief exit : Exit and unregister module, with no params and no return value.
        */
       void exit (  )
       {
         callVoid( "exit" );
       }

       /**
        * \brief fade : Sets the intensity of a LED or Group of LEDs within a given time.
        * \param pName The name of the LED or Group.
        * \param pIntensity The intensity of the LED or Group (a value between 0 and 1).
        * \param pDuration The duration of the fade in seconds
        */
       void fade ( std::string pName, float pIntensity, float pDuration )
       {
         callVoid( "fade", pName, pIntensity, pDuration );
       }

       /**
        * \brief fadeRGB : Sets the intensity of a led. If the name matches an RGB led, all channels are set to the same value.
        * \param pName The name of the LED or Group.
        * \param nRGB The RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB.
        * \param pDuration Time used to fade in seconds.
        */
       void fadeRGB ( std::string pName, int nRGB, float pDuration )
       {
         callVoid( "fadeRGB", pName, nRGB, pDuration );
       }

       /**
        * \brief getBrokerName : return the broker name
        * \return broker name : string that contain broker name
        */
       std::string getBrokerName (  )
       {
         return call<std::string>( "getBrokerName" );
       }

       /**
        * \brief getIntensity : Sets the intensity of a LED or Group of LEDs.
        * \param pName The name of the LED or Group.
        * \return none : none
        */
       ALValue getIntensity ( std::string pName )
       {
         return call<ALValue>( "getIntensity", pName );
       }

       /**
        * \brief getMethodHelp : Retrieve a method's description
        * \param methodName the name of the method
        * \return getMethodHelp : a structure containing the method description
        */
       ALValue getMethodHelp ( std::string methodName )
       {
         return call<ALValue>( "getMethodHelp", methodName );
       }

       /**
        * \brief getMethodList : Retrieve the module's method list.
        * \return methodList : an array containing methods name.
        */
       std::vector<std::string>  getMethodList (  )
       {
         return call<std::vector<std::string> >( "getMethodList" );
       }

       /**
        * \brief innerTest : Run an internal test to this module.
        * \return Test_return : true if internal tests are ok
        */
       bool innerTest (  )
       {
         return call<bool>( "innerTest" );
       }

       /**
        * \brief isRunning : return true if method is currently running
        * \param ID ID of the method to wait
        * \return isRunning : True method is currently running
        */
       bool isRunning ( int ID )
       {
         return call<bool>( "isRunning", ID );
       }

       /**
        * \brief listGroup : Lists the devices in the group.
        * \param pGroupName The name of the Group.
        * \return value : A vector of string device names.
        */
       std::vector<std::string>  listGroup ( std::string pGroupName )
       {
         return call<std::vector<std::string> >( "listGroup", pGroupName );
       }

       /**
        * \brief listGroups : Lists available group names.
        * \return value : An vector of group names.
        */
       std::vector<std::string>  listGroups (  )
       {
         return call<std::vector<std::string> >( "listGroups" );
       }

       /**
        * \brief moduleHelp : Retrieve the module's description
        * \return moduleHelp : a structure describing the module
        */
       ALValue moduleHelp (  )
       {
         return call<ALValue>( "moduleHelp" );
       }

       /**
        * \brief off : Switch to a minimum intensity a LED or Group of LEDs.
        * \param pName The name of the LED or Group.
        */
       void off ( std::string pName )
       {
         callVoid( "off", pName );
       }

       /**
        * \brief on : Switch to a maximum intensity a LED or Group of LEDs.
        * \param pName The name of the LED or Group.
        */
       void on ( std::string pName )
       {
         callVoid( "on", pName );
       }

       /**
        * \brief ping : Just a ping, with no params and returning always true
        * \return alwaysTrue : returns always true
        */
       bool ping (  )
       {
         return call<bool>( "ping" );
       }

       /**
        * \brief randomEyes : Launch a random animation in eyes
        * \param pDuration Approximate duration of the animation in seconds.
        */
       void randomEyes ( float pDuration )
       {
         callVoid( "randomEyes", pDuration );
       }

       /**
        * \brief rasta : Launch a green/yellow/red rasta animation on all body.
        * \param pDuration Approximate duration of the animation in seconds.
        */
       void rasta ( float pDuration )
       {
         callVoid( "rasta", pDuration );
       }

       /**
        * \brief rotateEyes : Launch a rotation using the leds of the eyes.
        * \param nRGB the RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB.
        * \param rTimeForTurn Approximate time to make one turn.
        * \param pDuration Approximate duration of the animation in seconds.
        */
       void rotateEyes ( int nRGB, float rTimeForTurn, float pDuration )
       {
         callVoid( "rotateEyes", nRGB, rTimeForTurn, pDuration );
       }

       /**
        * \brief setIntensity : Sets the intensity of a LED or Group of LEDs.
        * \param pName The name of the LED or Group.
        * \param pIntensity The intensity of the LED or Group (a value between 0 and 1).
        */
       void setIntensity ( std::string pName, float pIntensity )
       {
         callVoid( "setIntensity", pName, pIntensity );
       }

       /**
        * \brief stop : callback when user call stop(id) on ALLeds method
        * \param stoppedID function ID allow to deduce function name, module name...
        */
       void stop ( int stoppedID )
       {
         callVoid( "stop", stoppedID );
       }

       /**
        * \brief version : Returns the revision of the module.
        * \return version_string : the string containing the version
        */
       std::string version (  )
       {
         return call<std::string>( "version" );
       }

       /**
        * \brief wait : wait end of execution method if method was called with pCall
        * \param ID ID of the method to wait
        * \param timeout timeout of the wait in ms. 0 if no timeout
        * \return timeout : True if wait exit with timeout
        */
       bool wait ( int ID, int timeout )
       {
         return call<bool>( "wait", ID, timeout );
       }

       /**
        * \brief waitMethod : wait end of execution method if method was called with pCall
        * \param name name of the method to wait
        * \param timeout timeout of the wait. 0 if no timeout
        * \return timeout : True if wait exit with timeout
        */
       int waitMethod ( std::string name, int timeout )
       {
         return call<int>( "waitMethod", name, timeout );
       }

    };
};

#endif
