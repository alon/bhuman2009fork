using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.IO;
using System.Windows.Forms;

namespace XabslEditor
{
  public class XabslBehavior
  {
    
    private DirectoryInfo _behaviorDir;

    /// <summary>
    /// Directory of the XABSL-behavior.
    /// </summary>
    public DirectoryInfo Dir
    {
      get { return _behaviorDir; }
    }
	

    XmlDocument _behaviorSettings;

    /// <summary>
    /// Constant how the directory containing the options of a behavior is named.
    /// </summary>
    public const string OPTIONS_DIR = "Options";

    public const string SYMBOLS_DIR = "Symbols";
 
    private FileInfo _curAgent;
    
    /// <summary>
    /// The file containg the agent informations for this behavior.
    /// </summary>
    public FileInfo Agent
    {
      get { return _curAgent; }
    }

    private bool _isLoaded;

    /// <summary>
    /// Gets wether the behavior was loaded successfully.
    /// </summary>
    public bool IsLoaded
    {
      get { return _isLoaded; }
    }

    private List<FileInfo> _options;

    /// <summary>
    /// List of files containing the options of this behavior.
    /// </summary>
    public List<FileInfo> Options
    {
      get { return _options; }
    }

    private List<FileInfo> _symbols;

    /// <summary>
    /// List of files containing the symbols of this behavior.
    /// </summary>
    public List<FileInfo> Symbols
    {
      get { return _symbols; }
    }

    private string _behaviorName;

    /// <summary>
    /// The name of this behavior.
    /// </summary>
    public string BehaviorName
    {
      get { return _behaviorName; }
      set { _behaviorName = value; }
    }

    /// <summary>
    /// The directory where to put into files during compilation.
    /// </summary>
    public string BuildDir
    {
      get { return relative2absolute(_behaviorSettings["prop"]["build"].InnerText); }
    }

    /// <summary>
    /// The file in which information about the identifiers used in this behavior is stored.
    /// </summary>
    public string ApiFile
    {
      get { return relative2absolute(_behaviorSettings["prop"]["api"].InnerText); }
    }

    /// <summary>
    /// Path to the compiler that will be used.
    /// </summary>
    public string CompilerPath
    {
      get { return relative2absolute(_behaviorSettings["prop"]["compiler"].InnerText); }
    }

    /// <summary>
    /// Directory where the dump-files generated by the compiler for incremental compilation are stored.
    /// </summary>
    public string DumpDir
    {
      get { return relative2absolute(_behaviorSettings["prop"]["dump"].InnerText); }
    }

    /// <summary>
    /// Path to the executeable of dot.
    /// </summary>
    public string PathToDot
    {
      get { return relative2absolute(_behaviorSettings["prop"]["dot"].InnerText); }
    }

    /// <summary>
    /// Constructor.
    /// </summary>
    /// <param name="directory">The directory where the XABSL-behavior is stored.</param>
    public XabslBehavior(string directory)
    {
      try
      {
        _isLoaded = false;
        _behaviorSettings = null;
        _behaviorDir = new DirectoryInfo(directory);
        _options = new List<FileInfo>();
        _symbols = new List<FileInfo>();
        _curAgent = new FileInfo(
          _behaviorDir.FullName
          + "\\agents" + XabslDocument.XabslEnding);

        bool shallOpen = false;

        // config-file there?
        FileInfo confFile = new FileInfo(_behaviorDir.FullName + "\\XabslEditor.conf");
        if (confFile.Exists)
        {
          shallOpen = true;
        }
        else
        {
          // ask the user to create one
          DialogResult result = MessageBox.Show("There is no configuration-file in that folder yet. Do you want to create one?",
            "configuration-file missing", MessageBoxButtons.YesNo);
          if (result == DialogResult.Yes)
          {
            // show configuration-dialog
            ConfigurationDlg dlg = new ConfigurationDlg(confFile, true);
            DialogResult dlgResult = dlg.ShowDialog();
            if (dlgResult == DialogResult.OK)
            {
              shallOpen = true;
            }
          }
        }

        if (shallOpen)
        {
          _behaviorSettings = new XmlDocument();
          _behaviorSettings.Load(confFile.FullName);

          _behaviorName = _behaviorSettings["prop"]["name"].InnerText;

          FindAvailableOptions();
          _isLoaded = true;
        }

      }
      catch (Exception ex)
      {
        ExceptionDialog.ShowError(ex);
      }
    }

    /// <summary>
    /// Update list of options belonging to the behavior.
    /// </summary>
    public void FindAvailableOptions()
    {
      // find all available options
      _options.Clear();
      
      DirectoryInfo rootdir = new DirectoryInfo(
        _behaviorDir.FullName
        + "\\" + OPTIONS_DIR);

      SearchDirectories(rootdir, _options);
    }

    private void SearchDirectories(DirectoryInfo directory, List<FileInfo> listToAdd)
    {
      foreach (DirectoryInfo d in directory.GetDirectories())
        SearchDirectories(d, listToAdd);
      FileInfo[] files = directory.GetFiles("*" + XabslDocument.XabslEnding);
      listToAdd.AddRange(files);
    }

    public void FindAvailableSymbols()
    {
      _symbols.Clear();
      DirectoryInfo rootdir = new DirectoryInfo(
        _behaviorDir.FullName
        + "\\" + SYMBOLS_DIR);

      SearchDirectories(rootdir, _symbols);
    }

    /// <summary>
    /// Shows a dialog which allows the user to change settings which belong the behavior (as the path to the compiler etc.)
    /// </summary>
    public void ShowConfigurationDlg()
    {
      FileInfo confFile = new FileInfo(_behaviorDir.FullName + "\\XabslEditor.conf");
      ConfigurationDlg dlg = new ConfigurationDlg(confFile, false);
      dlg.ShowDialog();

      // update settings
      _behaviorSettings = new XmlDocument();
      _behaviorSettings.Load(confFile.FullName);
    }

    private string relative2absolute(string path)
    {
      if (path.StartsWith("."))
      {
        path = _behaviorDir.FullName + "\\" + path;
      }
      return path;
    }
  }
}
